{"version":3,"sources":["../../../../../assets/scripts/base/assets/scripts/base/util.js"],"names":["Util","BLOCK_WIDTH","BLOCK_HEIGHT","BLOCK_PER_CHUNK_WIDTH","BLOCK_PER_CHUNK_HEIGHT","CHUNK_WIDTH","CHUNK_HEIGHT","pixel","parseInt","chunkId"],"mappings":";;;;;;;;;;;;;;IACMA;;;;aAGFC,cAAc;aACdC,eAAe;aAGfC,wBAAwB;aACxBC,yBAAyB;aAGzBC,cAAc,KAAKJ,WAAL,GAAmB,KAAKE;aACtCG,eAAe,KAAKJ,YAAL,GAAoB,KAAKE;;AAVxC;;;AAIA;;;AAIA;;;;;wCAIiBG,OAAO;AACpB,mBAAOC,SAAUD,QAAQ,KAAKF,WAAvB,CAAP;AACH;;;wCAEgBE,OAAO;AACpB,mBAAOC,SAAUD,QAAQ,KAAKD,YAAvB,CAAP;AACH;;;wCAEgBG,SAAS;AACtB,mBAAOD,SAAUC,UAAU,KAAKJ,WAAzB,CAAP;AACH;;;wCAEgBI,SAAS;AACtB,mBAAOD,SAAUC,UAAU,KAAKH,YAAzB,CAAP;AACH;;;gDAEwBC,OAAO;AAC5B,mBAAOC,SAAUD,QAAQ,KAAKN,WAAvB,CAAP;AACH;;;gDAEwBM,OAAO;AAC5B,mBAAOC,SAAUD,QAAQ,KAAKL,YAAvB,CAAP;AACH;;;gDAEwBO,SAAS;AAC9B,mBAAOD,SAAUC,UAAU,KAAKR,WAAzB,CAAP;AACH;;;gDAEwBQ,SAAS;AAC9B,mBAAOD,SAAUC,UAAU,KAAKP,YAAzB,CAAP;AACH;;;;;;kBAIU,IAAIF,IAAJ","file":"util.js","sourceRoot":"../../../../../assets/scripts/base","sourcesContent":["\nclass Util\n{\n    // 方块包含的像素\n    BLOCK_WIDTH = 16;\n    BLOCK_HEIGHT = 16;\n\n    // Chunk包含的方块数\n    BLOCK_PER_CHUNK_WIDTH = 16;\n    BLOCK_PER_CHUNK_HEIGHT = 16;\n\n    // Chunk包含的像素\n    CHUNK_WIDTH = this.BLOCK_WIDTH * this.BLOCK_PER_CHUNK_WIDTH;\n    CHUNK_HEIGHT = this.BLOCK_HEIGHT * this.BLOCK_PER_CHUNK_HEIGHT;\n    \n    pixel2ChunkId_W (pixel) {\n        return parseInt( pixel / this.CHUNK_WIDTH );\n    }\n\n    pixel2ChunkId_H (pixel) {\n        return parseInt( pixel / this.CHUNK_HEIGHT );\n    }\n\n    chunkId2Pixel_W (chunkId) {\n        return parseInt( chunkId * this.CHUNK_WIDTH );\n    }\n\n    chunkId2Pixel_H (chunkId) {\n        return parseInt( chunkId * this.CHUNK_HEIGHT );\n    }\n\n    pixel2AbsoluteBlockId_W (pixel) {\n        return parseInt( pixel / this.BLOCK_WIDTH );\n    }\n\n    pixel2AbsoluteBlockId_H (pixel) {\n        return parseInt( pixel / this.BLOCK_HEIGHT );\n    }\n\n    absoluteBlockId2Pixel_W (chunkId) {\n        return parseInt( chunkId * this.BLOCK_WIDTH );\n    }\n\n    absoluteBlockId2Pixel_H (chunkId) {\n        return parseInt( chunkId * this.BLOCK_HEIGHT );\n    }\n\n}\n\nexport default new Util();"]}