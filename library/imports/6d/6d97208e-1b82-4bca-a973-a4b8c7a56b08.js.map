{"version":3,"sources":["../../../../assets/scripts/assets/scripts/map.js"],"names":["perlinNosie","require","util","cc","Class","extends","Component","properties","blockPrefab","default","type","Prefab","chunkRange","getBlockInPool","block","blockPool","size","get","instantiate","node","addChild","createNewChunk","id","centerPoint","log","chunk","i","BLOCK_PER_CHUNK_WIDTH","h","perlin","undefined","parseInt","j","BLOCK_PER_CHUNK_HEIGHT","x","y","entity","worldMap","initMap","getChunk","playerCurrChunk","chunks","chunkX","chunkY","push","untargetAllRenderedChunks","chunkIndex","renderedChunks","rendered","clearUnrenderedChunks","renderBlocks","put","disChunk","renderChunk","renderBlock","position","chunkPosition","newBlock","BLOCK_WIDTH","BLOCK_HEIGHT","getComponent","map","PhysicsCollider","enabled","reflushMap","willRenderChunks","player","currChunk","length","onLoad","setContentSize","parent","getContentSize","setPosition","setAnchorPoint","zIndex","macro","MIN_ZINDEX","getChildByName","children","bind","gamePosition","NodePool","width","height","start"],"mappings":"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","file":"map.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\nconst perlinNosie = require(\"./base/perlinNoise\")\nconst util = require(\"./base/util\")\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // 这个属性引用了星星预制资源\n        blockPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n\n        chunkRange: [0, 0],\n        //worldMap: {},\n    },\n\n    getBlockInPool() {\n        let block = null;\n        if (this.blockPool.size() > 0) { // 通过 size 接口判断对象池中是否有空闲的对象\n            block = this.blockPool.get();\n        } else { // 如果没有空闲对象，也就是对象池中备用对象不够时，我们就用 cc.instantiate 重新创建\n            block = cc.instantiate(this.blockPrefab);\n            //cc.log(`create new block `)\n        }\n\n        // 将生成的方塊加入节点树\n        this.node.addChild(block);\n        //block.zIndex = cc.macro.MIN_ZINDEX;\n        //cc.log(block.zIndex);\n        return block;\n    },\n\n    createNewChunk(id, centerPoint) {\n\n        cc.log(`create new map chunk ${id}`);\n        let chunk = {};\n        chunk.centerPoint = centerPoint;\n        chunk.id = id;\n\n\n        for (let i = -util.BLOCK_PER_CHUNK_WIDTH / 2; i < util.BLOCK_PER_CHUNK_WIDTH / 2; i++) {\n\n            let h = this.perlin[`${(centerPoint[0] + i)}`];\n            if (null === h || undefined === h) {\n                h = parseInt(perlinNosie((centerPoint[0] + i) * 0.001, 1.234));\n                this.perlin[`${(centerPoint[0] + i)}`] = h\n                //cc.log(\"h\", h, `${(centerPoint[0] + i)}`, (centerPoint[0] + i) * 0.01);\n            }\n\n            for (let j = - util.BLOCK_PER_CHUNK_HEIGHT / 2; j < util.BLOCK_PER_CHUNK_HEIGHT / 2; j++) {\n                //cc.log(\"xxx\", i,j);\n                let block = {}\n                block.x = i;\n                block.y = j;\n\n                block.type = 0;\n                block.entity = 0;\n\n                if ((centerPoint[1] + j) <= h) {\n                    block.type = 1;\n                };\n\n                // 边缘方块需要碰撞检测\n                if (((centerPoint[1] + j) === h)\n                    || (i === -util.BLOCK_PER_CHUNK_WIDTH / 2)\n                    || (i === (util.BLOCK_PER_CHUNK_WIDTH / 2 - 1))\n                    || (j === -util.BLOCK_PER_CHUNK_HEIGHT / 2)\n                    || (j === (util.BLOCK_PER_CHUNK_HEIGHT / 2 - 1))\n                ) {\n                    // 只有非空方块才能有碰撞检测\n                    if (1 === block.type) {\n                        block.entity = 1;\n                    }\n                };\n\n                chunk[`${i}|${j}`] = block;\n            }\n        }\n        this.worldMap[`${id}`] = chunk;\n\n        return chunk;\n    },\n\n    initMap() {\n        cc.log(\"Start to init map, will create 32 * 8 chunks\");\n        this.worldMap = this.worldMap ? this.worldMap : {};\n\n        for (let i = -16; i < 16; i++) {\n            for (let j = -4; j < 4; j++) {\n                this.createNewChunk(`${i}|${j}`, [i * util.BLOCK_PER_CHUNK_WIDTH, j * util.BLOCK_PER_CHUNK_HEIGHT]);\n            }\n        }\n        //cc.log(\"chunk\", this.worldMap);\n    },\n\n    getChunk(playerCurrChunk) {\n        let chunks = [];\n        let chunkX = playerCurrChunk[0];\n        let chunkY = playerCurrChunk[1];\n\n        //cc.log(playerGamePosition)\n\n        //for (let i =  - 1; i <=  1; i++) {\n        for (let i = -this.chunkRange[0] / 2 - 1; i <= this.chunkRange[0] / 2 + 1; i++) {\n            //let j = 0;\n            for (let j = -this.chunkRange[1] / 2 - 1; j <= this.chunkRange[1] / 2 + 1; j++) {\n                let x = parseInt(i);\n                let y = parseInt(j);\n                //cc.log(x, y)\n\n                let chunk = this.worldMap[`${chunkX + x}|${chunkY + y}`];\n                if (!chunk) {\n                    chunk = this.createNewChunk(\n                        `${chunkX + x}|${chunkY + y}`,\n                        [\n                            (chunkX + x) * util.BLOCK_PER_CHUNK_WIDTH,\n                            (chunkY + y) * util.BLOCK_PER_CHUNK_HEIGHT\n                        ]\n                    )\n                }\n\n                chunks.push(chunk);\n            }\n        }\n\n        return chunks;\n    },\n\n    untargetAllRenderedChunks() {\n        for (let chunkIndex in this.renderedChunks) {\n            this.renderedChunks[chunkIndex].rendered = false;\n        }\n    },\n\n    clearUnrenderedChunks() {\n        for (let chunkIndex in this.renderedChunks) {\n            let chunk = this.renderedChunks[chunkIndex];\n            if (chunk.rendered === false) {\n                cc.log(`RenderChunk ${chunk.centerPoint[0]}|${chunk.centerPoint[1]} will clear`);\n                for (let block of chunk.renderBlocks) {\n                    if (1 === block.type) {\n                        this.blockPool.put(block.block);\n                    }\n                }\n\n                delete this.renderedChunks[chunkIndex];\n            }\n        }\n    },\n\n    disChunk(chunks) {\n\n        this.untargetAllRenderedChunks();\n\n        for (let chunk of chunks) {\n            //cc.log(\"dischunk c\", chunk);\n\n            if (this.renderedChunks[`${chunk.centerPoint[0]}|${chunk.centerPoint[1]}`]) {\n\n                this.renderedChunks[`${chunk.centerPoint[0]}|${chunk.centerPoint[1]}`].rendered = true;\n\n                //cc.log(`RenderChunk ${chunk.centerPoint[0]}|${chunk.centerPoint[1]} need not rerender`);\n                continue;\n            }\n\n            this.renderedChunks[`${chunk.centerPoint[0]}|${chunk.centerPoint[1]}`] = {};\n            cc.log(`RenderChunk ${chunk.centerPoint[0]}|${chunk.centerPoint[1]} created`);\n\n            let renderChunk = this.renderedChunks[`${chunk.centerPoint[0]}|${chunk.centerPoint[1]}`];\n            renderChunk.rendered = true;\n            renderChunk.renderBlocks = [];\n            renderChunk.centerPoint = chunk.centerPoint;\n\n            for (let i = -util.BLOCK_PER_CHUNK_WIDTH / 2; i < util.BLOCK_PER_CHUNK_WIDTH / 2; i++) {\n                for (let j = -util.BLOCK_PER_CHUNK_HEIGHT / 2; j < util.BLOCK_PER_CHUNK_HEIGHT / 2; j++) {\n\n                    let block = chunk[`${i}|${j}`];\n                    let renderBlock = {};\n\n                    renderBlock.type = block.type;\n                    renderBlock.position = [i, j];\n                    renderBlock.chunkPosition = chunk.centerPoint;\n\n                    if (1 === renderBlock.type) {\n\n                        var newBlock = this.getBlockInPool();\n                        newBlock.x = (block.x + chunk.centerPoint[0]) * util.BLOCK_WIDTH;\n                        newBlock.y = (block.y + chunk.centerPoint[1]) * util.BLOCK_HEIGHT;\n                        newBlock.getComponent(\"block\").map = this;\n\n                        if (block.entity) {\n                            newBlock.getComponent(cc.PhysicsCollider).enabled = true;\n                        } else {\n                            newBlock.getComponent(cc.PhysicsCollider).enabled = false;\n                        }\n\n                        renderBlock.block = newBlock;\n                    }\n\n                    renderChunk.renderBlocks.push(renderBlock);\n                }\n\n            }\n        }\n\n        this.clearUnrenderedChunks();\n    },\n\n    reflushMap() {\n        let willRenderChunks = this.getChunk(this.player.currChunk);\n        if (0 < willRenderChunks.length) {\n            cc.log(\"map will reflush.\"); \n            this.disChunk(willRenderChunks);\n        }\n    },\n\n    onLoad() {\n        cc.log(cc);\n        this.node.setContentSize(this.node.parent.getContentSize());\n        this.node.setPosition(-this.node.x / 2, -this.node.y / 2);\n        this.node.setAnchorPoint(0, 0);\n        this.node.zIndex = cc.macro.MIN_ZINDEX;\n\n        this.player = this.node.getChildByName(\"player\");\n        cc.log(this.node.children);\n        this.player.map = this;\n        this.player.reflushMap = this.reflushMap.bind(this);\n\n        this.player.gamePosition = [0, 150];\n        this.player.currChunk = [\n            this.player.gamePosition[0] / util.BLOCK_PER_CHUNK_WIDTH,\n            this.player.gamePosition[1] / util.BLOCK_PER_CHUNK_HEIGHT\n        ];\n\n        this.perlin = {};\n\n        this.player.setPosition(this.player.gamePosition[0] * util.BLOCK_WIDTH, this.player.gamePosition[1] * util.BLOCK_HEIGHT);\n\n        this.blockPool = new cc.NodePool();\n\n        this.renderedChunks = {};\n        this.chunkRange = [parseInt(this.node.width / util.BLOCK_WIDTH / util.BLOCK_PER_CHUNK_WIDTH) + 2, parseInt(this.node.height / util.BLOCK_HEIGHT / util.BLOCK_PER_CHUNK_HEIGHT) + 2];\n\n        this.initMap();\n\n        this.reflushMap();\n\n        cc.log(this.node.children);\n\n    },\n\n    start() {\n\n    },\n\n    // update(dt) {\n    // },\n});\n"]}