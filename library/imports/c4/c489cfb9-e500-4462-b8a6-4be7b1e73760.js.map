{"version":3,"sources":["../../../../../assets/scripts/base/assets/scripts/base/util.js"],"names":["Util","BLOCK_WIDTH","BLOCK_HEIGHT","BLOCK_PER_CHUNK_WIDTH","BLOCK_PER_CHUNK_HEIGHT","CHUNK_WIDTH","CHUNK_HEIGHT","CHUNK_QUARTREE_DEPTH","pixel2ChunkId_W","pixel","parseInt","pixel2ChunkId_H","chunkId2Pixel_W","chunkId","chunkId2Pixel_H","pixel2AbsoluteBlockId_W","pixel2AbsoluteBlockId_H","absoluteBlockId2Pixel_W","absoluteBlockId2Pixel_H","getChunkName","x","y","getChunkRect","DATATYPE","CHUNK","Symbol","QUARTREE","BLOCK","module","exports"],"mappings":";;;;;;AACA,IAAIA,OACJ;AACI;AACAC,iBAAc,EAFlB;AAGIC,kBAAc,EAHlB;;AAKI;AACAC,2BAAwB,EAN5B;AAOIC,4BAAyB,EAP7B;;AASI;AACA,QAAIC,WAAJ,GAAkB;AACd,eAAO,KAAKJ,WAAL,GAAmB,KAAKE,qBAA/B;AACH,KAZL;AAaI,QAAIG,YAAJ,GAAmB;AACf,eAAO,KAAKJ,YAAL,GAAoB,KAAKE,sBAAhC;AACH,KAfL;;AAiBI;AACAG,0BAAuB,CAlB3B;;AAoBIC,mBApBJ,2BAoBqBC,KApBrB,EAoB4B;AACpB,eAAOC,SAAUD,QAAQ,KAAKJ,WAAvB,CAAP;AACH,KAtBL;AAwBIM,mBAxBJ,2BAwBqBF,KAxBrB,EAwB4B;AACpB,eAAOC,SAAUD,QAAQ,KAAKH,YAAvB,CAAP;AACH,KA1BL;AA4BIM,mBA5BJ,2BA4BqBC,OA5BrB,EA4B8B;AACtB,eAAOH,SAAUG,UAAU,KAAKR,WAAzB,CAAP;AACH,KA9BL;AAgCIS,mBAhCJ,2BAgCqBD,OAhCrB,EAgC8B;AACtB,eAAOH,SAAUG,UAAU,KAAKP,YAAzB,CAAP;AACH,KAlCL;AAoCIS,2BApCJ,mCAoC6BN,KApC7B,EAoCoC;AAC5B,eAAOC,SAAUD,QAAQ,KAAKR,WAAvB,CAAP;AACH,KAtCL;AAwCIe,2BAxCJ,mCAwC6BP,KAxC7B,EAwCoC;AAC5B,eAAOC,SAAUD,QAAQ,KAAKP,YAAvB,CAAP;AACH,KA1CL;AA4CIe,2BA5CJ,mCA4C6BJ,OA5C7B,EA4CsC;AAC9B,eAAOH,SAAUG,UAAU,KAAKZ,WAAzB,CAAP;AACH,KA9CL;AAgDIiB,2BAhDJ,mCAgD6BL,OAhD7B,EAgDsC;AAC9B,eAAOH,SAAUG,UAAU,KAAKX,YAAzB,CAAP;AACH,KAlDL;AAoDIiB,gBApDJ,wBAoDiBC,CApDjB,EAoDoBC,CApDpB,EAoDuB;AACf,eAAUD,CAAV,SAAeC,CAAf;AACH,KAtDL;AAwDIC,gBAxDJ,wBAwDiBF,CAxDjB,EAwDoBC,CAxDpB,EAwDuB;AACf,eAAO,CACH,KAAKT,eAAL,CAAqBQ,CAArB,CADG,EAEH,KAAKN,eAAL,CAAqBO,CAArB,CAFG,EAGH,KAAKhB,WAHF,EAIH,KAAKC,YAJF,CAAP;AAMH,KA/DL;;;AAiEIiB,cAAW;AACPC,eAAQC,OAAO,OAAP,CADD;AAEPC,kBAAWD,OAAO,UAAP,CAFJ;AAGPE,eAAQF,OAAO,OAAP;AAHD;;AAjEf,CADA;;AA0ECG,OAAOC,OAAP,GAAkB7B,IAAlB","file":"util.js","sourceRoot":"../../../../../assets/scripts/base","sourcesContent":["\nvar Util =\n{\n    // 方块包含的像素\n    BLOCK_WIDTH : 16,\n    BLOCK_HEIGHT :16,\n\n    // Chunk包含的方块数\n    BLOCK_PER_CHUNK_WIDTH : 16,\n    BLOCK_PER_CHUNK_HEIGHT : 16,\n\n    // Chunk包含的像素\n    get CHUNK_WIDTH() {\n        return this.BLOCK_WIDTH * this.BLOCK_PER_CHUNK_WIDTH;\n    },\n    get CHUNK_HEIGHT() { \n        return this.BLOCK_HEIGHT * this.BLOCK_PER_CHUNK_HEIGHT;\n    },\n\n    // Chunk的四叉樹深度, 注意和方塊數聯動！！！！\n    CHUNK_QUARTREE_DEPTH : 4,\n    \n    pixel2ChunkId_W (pixel) {\n        return parseInt( pixel / this.CHUNK_WIDTH );\n    },\n\n    pixel2ChunkId_H (pixel) {\n        return parseInt( pixel / this.CHUNK_HEIGHT );\n    },\n\n    chunkId2Pixel_W (chunkId) {\n        return parseInt( chunkId * this.CHUNK_WIDTH );\n    },\n\n    chunkId2Pixel_H (chunkId) {\n        return parseInt( chunkId * this.CHUNK_HEIGHT );\n    },\n\n    pixel2AbsoluteBlockId_W (pixel) {\n        return parseInt( pixel / this.BLOCK_WIDTH );\n    },\n\n    pixel2AbsoluteBlockId_H (pixel) {\n        return parseInt( pixel / this.BLOCK_HEIGHT );\n    },\n\n    absoluteBlockId2Pixel_W (chunkId) {\n        return parseInt( chunkId * this.BLOCK_WIDTH );\n    },\n\n    absoluteBlockId2Pixel_H (chunkId) {\n        return parseInt( chunkId * this.BLOCK_HEIGHT );\n    },\n\n    getChunkName(x, y) {\n        return `${x}|${y}`;\n    },\n\n    getChunkRect(x, y) {\n        return [\n            this.chunkId2Pixel_W(x),\n            this.chunkId2Pixel_H(y),\n            this.CHUNK_WIDTH,\n            this.CHUNK_HEIGHT\n        ]\n    },\n\n    DATATYPE : {\n        CHUNK : Symbol(\"Chunk\"),\n        QUARTREE : Symbol(\"Quartree\"),\n        BLOCK : Symbol(\"Block\"),\n    }\n\n}\n\n module.exports =  Util"]}