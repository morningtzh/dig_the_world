{"version":3,"sources":["map_manager.js"],"names":["util","require","mapDateManager","RenderChunk","cc","Class","extends","Component","properties","blockPrefab","default","type","Prefab","chunkRange","getBlockInPool","block","blockPool","size","get","instantiate","putBlockToPool","put","getChunkInPool","chunk","chunkPool","init","log","putChunkToPool","untargetAllRenderedChunks","chunkIndex","renderedChunks","rendered","clearUnrenderedChunks","chunkX","chunkY","destroy","disChunk","chunks","x","y","renderChunk","parent","node","load","reflushMap","willRenderChunks","getMapRaw","player","winSize","width","height","length","onLoad","setContentSize","getContentSize","setAnchorPoint","zIndex","macro","MIN_ZINDEX","getChildByName","children","map","bind","gamePosition","currChunk","BLOCK_PER_CHUNK_WIDTH","BLOCK_PER_CHUNK_HEIGHT","perlin","setPosition","BLOCK_WIDTH","BLOCK_HEIGHT","NodePool","parseInt","CHUNK_WIDTH","point","forEach","blockA","color","Color","RED","start"],"mappings":"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","file":"map_manager.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\nconst util = require(\"./base/util\");\nconst mapDateManager = require(\"./serverSimulation/mapCreator\");\nconst RenderChunk = require(\"./map/render_chunk\");\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        blockPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n\n        chunkRange: [0, 0],\n    },\n\n    getBlockInPool() {\n        let block = null;\n        if (this.blockPool.size() > 0) { // 通过 size 接口判断对象池中是否有空闲的对象\n            block = this.blockPool.get();\n        } else { // 如果没有空闲对象，也就是对象池中备用对象不够时，我们就用 cc.instantiate 重新创建\n            block = cc.instantiate(this.blockPrefab);\n            //cc.log(`create new block `)\n        }\n\n        return block;\n    },\n\n    putBlockToPool(block) {\n        this.blockPool.put(block);\n    },\n\n    getChunkInPool() {\n        let chunk = null;\n        if (this.chunkPool.size() > 0) { // 通过 size 接口判断对象池中是否有空闲的对象\n            chunk = this.chunkPool.get();\n        } else { // 如果没有空闲对象，也就是对象池中备用对象不够时，我们就用 cc.instantiate 重新创建\n            chunk = new RenderChunk();\n            chunk.init(this);\n            cc.log(`create new chunk `);\n        }\n\n        return chunk;\n    },\n\n    putChunkToPool(chunk) {\n        this.chunkPool.put(chunk);\n    },\n\n    untargetAllRenderedChunks() {\n        for (let chunkIndex in this.renderedChunks) {\n            this.renderedChunks[chunkIndex].rendered = false;\n        }\n    },\n\n    clearUnrenderedChunks() {\n        for (let chunkIndex in this.renderedChunks) {\n            let chunk = this.renderedChunks[chunkIndex];\n            if (chunk.rendered === false) {\n                cc.log(`RenderChunk ${chunk.chunkX}|${chunk.chunkY} will clear`);\n\n                //this.chunkPool.put(chunk);\n                chunk.destroy();\n                delete this.renderedChunks[chunkIndex];\n            }\n        }\n    },\n\n    disChunk(chunks) {\n\n        this.untargetAllRenderedChunks();\n\n        for (let chunk of chunks) {\n\n            if (this.renderedChunks[`${chunk.x}|${chunk.y}`]) {\n\n                this.renderedChunks[`${chunk.x}|${chunk.y}`].rendered = true;\n                cc.log(`RenderChunk ${chunk.x}|${chunk.y} need not rerender`);\n                continue;\n            }\n\n            cc.log(`RenderChunk ${chunk.x}|${chunk.y} created`);\n            let renderChunk = this.getChunkInPool();\n            renderChunk.parent = this.node;\n            renderChunk.load(chunk);\n            renderChunk.rendered = true;\n\n            this.renderedChunks[`${chunk.x}|${chunk.y}`] = renderChunk;\n\n            //cc.log(\"dischunk:\", renderChunk);\n        }\n\n        this.clearUnrenderedChunks();\n    },\n\n    reflushMap(x,y) {\n\n        let willRenderChunks = mapDateManager.getMapRaw(\n            this.player.x,\n            this.player.y,\n            x? x :cc.winSize.width,\n            y? y :cc.winSize.height\n        );\n\n        //cc.log(\"willRenderChunks\", willRenderChunks);\n\n        if (0 < willRenderChunks.length) {\n            cc.log(\"map will reflush.\");\n            this.disChunk(willRenderChunks);\n        }\n    },\n\n    onLoad() {\n        cc.log(cc);\n        cc.log(\"Map onLoad\");\n        this.node.setContentSize(this.node.parent.getContentSize());\n        this.node.setAnchorPoint(0.5, 0.5);\n        this.node.zIndex = cc.macro.MIN_ZINDEX;\n\n        this.player = this.node.getChildByName(\"player\");\n        cc.log(this.node.children);\n        this.player.map = this;\n        this.player.reflushMap = this.reflushMap.bind(this);\n\n        this.player.gamePosition = [0, 150];\n        this.player.currChunk = [\n            this.player.gamePosition[0] / util.BLOCK_PER_CHUNK_WIDTH,\n            this.player.gamePosition[1] / util.BLOCK_PER_CHUNK_HEIGHT\n        ];\n\n        this.perlin = {};\n\n        this.player.setPosition(this.player.gamePosition[0] * util.BLOCK_WIDTH, this.player.gamePosition[1] * util.BLOCK_HEIGHT);\n\n        this.blockPool = new cc.NodePool();\n        this.chunkPool = new cc.NodePool();\n\n        this.renderedChunks = {};\n        this.chunkRange = [parseInt(this.node.width / util.BLOCK_WIDTH / util.BLOCK_PER_CHUNK_WIDTH) + 2, parseInt(this.node.height / util.BLOCK_HEIGHT / util.BLOCK_PER_CHUNK_HEIGHT) + 2];\n\n        this.reflushMap(20 * util.CHUNK_WIDTH, 5 * util.CHUNK_WIDTH);\n\n        cc.log(\"type of blockPrefab:\", this.blockPrefab);\n\n        let point = [\n            [-128, -128],\n            [-128, 0],\n            [-128, 128],\n            [0, -128],\n            [0, 0],\n            [0, 128],\n            [128, -128],\n            [128, -0],\n            [128, 128],\n        ];\n        point.forEach((point) => {\n            let blockA = this.getBlockInPool();\n            blockA.color = cc.Color.RED;\n            blockA.x = point[0];\n            blockA.y = point[1];\n            blockA.parent = this.node;\n        });\n\n\n    },\n\n    start() {\n\n    },\n\n    // update(dt) {\n    // },\n});\n"]}