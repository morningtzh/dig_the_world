{"version":3,"sources":["mapCreator.js"],"names":["util","require","perlinNosie","MapDataChunk","MapCreator","loadedMap","loadedMapRaw","perlin","x","h","undefined","parseInt","name","cc","sys","localStorage","getItem","data","setItem","y","ifRaw","chunkName","rawChunk","chunk","loadData","dump","saveData","pixelX","pixelY","pixelWidth","pixelHeight","chunks","chunkXMin","pixel2ChunkId_W","chunkXMax","chunkYMin","pixel2ChunkId_H","chunkYMax","_x","_y","push","loadChunk","log","module","exports"],"mappings":"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","file":"mapCreator.js","sourceRoot":"../../../../../assets/scripts/serverSimulation","sourcesContent":["\nconst util = require(\"../base/util\");\nconst perlinNosie = require(\"../base/perlinNoise\");\nconst MapDataChunk = require(\"./map_data_chunk\");\n\nclass MapCreator {\n\n    constructor() {\n        this.loadedMap = {};\n        this.loadedMapRaw = {};\n\n        this.perlin = {};\n\n    }\n\n    getPerlin(x) {\n        let h = this.perlin[`${x}`];\n        if (null === h || undefined === h) {\n            h = parseInt(perlinNosie(x * 0.001, 1.234));\n            this.perlin[`${x}`] = h;\n        }\n\n        return h;\n    }\n\n    loadData(name) {\n        cc.sys.localStorage.getItem(name);\n\n        \n    }\n\n    saveData(name, data) {\n        cc.sys.localStorage.setItem(name, data);\n    }\n\n    loadChunk(x, y, ifRaw) {\n        let chunkName = `${x}|${y}`;\n\n        //cc.log(`loadChunk ${chunkName} ${ifRaw ? \"Raw\":\"Object\"}`);\n\n        let rawChunk = this.loadedMapRaw[chunkName];\n        let chunk = this.loadedMap[chunkName];\n\n        /* 先獲取原始數據，獲取不到則創建 */\n        if (!rawChunk) {\n\n            /* 嘗試從存儲數據中獲取 */\n            rawChunk = this.loadData(`chunk_${chunkName}`);\n            if (!rawChunk) {\n\n                chunk = new MapDataChunk(x, y, null, this);\n                rawChunk = chunk.dump();\n\n                this.loadedMap[chunkName] = chunk;\n                this.loadedMapRaw[chunkName] = rawChunk;\n\n                /* 生成好后需要存儲數據 */\n                this.saveData(`chunk_${chunkName}`, rawChunk);\n            }\n        }\n\n        /* 如果指定需要非原始數據，則探測，若沒有則從原始數據生成 */\n        if (!ifRaw && !chunk) {\n            chunk = new MapDataChunk(x, y, rawChunk, this);\n        }\n\n        //cc.log(\"cccccc\", chunk, rawChunk);\n\n        if (ifRaw)\n            return rawChunk;\n        else\n            return chunk;\n    }\n\n    getMap(pixelX, pixelY, pixelWidth, pixelHeight) {\n        let chunks = [];\n\n        let chunkXMin = util.pixel2ChunkId_W(pixelX - pixelWidth / 2);\n        let chunkXMax = util.pixel2ChunkId_W(pixelX + pixelWidth / 2);\n        let chunkYMin = util.pixel2ChunkId_H(pixelY - pixelHeight / 2);\n        let chunkYMax = util.pixel2ChunkId_H(pixelY + pixelHeight / 2);\n\n        for (let _x = chunkXMin; _x <= chunkXMax; _x++) {\n            for (let _y = chunkYMin; _y <= chunkYMax; _y++) {\n                chunks.push(this.loadChunk(_x, _y, false));\n            }\n        }\n\n        return chunks;\n    }\n\n    getMapRaw(pixelX, pixelY, pixelWidth, pixelHeight) {\n        let chunks = [];\n        let chunkXMin = util.pixel2ChunkId_W(pixelX - pixelWidth / 2) - 1;\n        let chunkXMax = util.pixel2ChunkId_W(pixelX + pixelWidth / 2) + 1;\n        let chunkYMin = util.pixel2ChunkId_H(pixelY - pixelHeight / 2) - 1;\n        let chunkYMax = util.pixel2ChunkId_H(pixelY + pixelHeight / 2) + 1;\n        cc.log(chunkXMin, chunkXMax, chunkYMin, chunkYMax);\n        for (let _x = chunkXMin; _x <= chunkXMax; _x++) {\n            for (let _y = chunkYMin; _y <= chunkYMax; _y++) {\n                chunks.push(this.loadChunk(_x, _y, true));\n            }\n        }\n\n        return chunks;\n    }\n\n}\n\nmodule.exports = new MapCreator();"]}