{"version":3,"sources":["perlinNoise.js"],"names":["PerlinNoise","persistence","Number_Of_Octaves","Noise","x","y","n","SmoothedNoise","corners","sides","center","Cosine_Interpolate","a","b","ft","Math","PI","f","cos","InterpolatedNoise","integer_X","parseInt","fractional_X","integer_Y","fractional_Y","v1","v2","v3","v4","i1","i2","total","p","i","frequency","amplitude"],"mappings":";;;;;;;;;kBAwCwBA;AAxCxB,IAAMC,cAAc,IAApB;AACA,IAAMC,oBAAoB,CAA1B;;AAEA,SAASC,KAAT,CAAeC,CAAf,EAAkBC,CAAlB,EAAqB;AACrB;AACI,QAAIC,IAAIF,IAAIC,IAAI,EAAhB;AACAC,QAAKA,KAAK,EAAN,GAAYA,CAAhB;AACA,WAAQ,MAAM,CAAEA,KAAKA,IAAIA,CAAJ,GAAQ,KAAR,GAAgB,MAArB,IAA+B,UAAhC,GAA8C,UAA/C,IAA6D,YAA3E;AACH;;AAED,SAASC,aAAT,CAAuBH,CAAvB,EAA0BC,CAA1B,EAA6B;AAC7B;AACI,QAAMG,UAAU,CAACL,MAAMC,IAAI,CAAV,EAAaC,IAAI,CAAjB,IAAsBF,MAAMC,IAAI,CAAV,EAAaC,IAAI,CAAjB,CAAtB,GAA4CF,MAAMC,IAAI,CAAV,EAAaC,IAAI,CAAjB,CAA5C,GAAkEF,MAAMC,IAAI,CAAV,EAAaC,IAAI,CAAjB,CAAnE,IAA0F,EAA1G;AACA,QAAMI,QAAQ,CAACN,MAAMC,IAAI,CAAV,EAAaC,CAAb,IAAkBF,MAAMC,IAAI,CAAV,EAAaC,CAAb,CAAlB,GAAoCF,MAAMC,CAAN,EAASC,IAAI,CAAb,CAApC,GAAsDF,MAAMC,CAAN,EAASC,IAAI,CAAb,CAAvD,IAA0E,CAAxF;AACA,QAAMK,SAASP,MAAMC,CAAN,EAASC,CAAT,IAAc,CAA7B;AACA,WAAOG,UAAUC,KAAV,GAAkBC,MAAzB;AACH;;AAED,SAASC,kBAAT,CAA4BC,CAA5B,EAA+BC,CAA/B,EAAkCT,CAAlC,EAAqC;AACrC;AACI,QAAMU,KAAKV,IAAIW,KAAKC,EAApB;AACA,QAAMC,IAAI,CAAC,IAAIF,KAAKG,GAAL,CAASJ,EAAT,CAAL,IAAqB,GAA/B;AACA,WAAOF,KAAK,IAAIK,CAAT,IAAcJ,IAAII,CAAzB;AACH;;AAED,SAASE,iBAAT,CAA2Bf,CAA3B,EAA8BC,CAA9B,EAAiC;AACjC;AACI,QAAMe,YAAYC,SAASjB,CAAT,CAAlB;AACA,QAAMkB,eAAelB,IAAIgB,SAAzB;AACA,QAAMG,YAAYF,SAAShB,CAAT,CAAlB;AACA,QAAMmB,eAAenB,IAAIkB,SAAzB;AACA,QAAME,KAAKlB,cAAca,SAAd,EAAyBG,SAAzB,CAAX;AACA,QAAMG,KAAKnB,cAAca,YAAY,CAA1B,EAA6BG,SAA7B,CAAX;AACA,QAAMI,KAAKpB,cAAca,SAAd,EAAyBG,YAAY,CAArC,CAAX;AACA,QAAMK,KAAKrB,cAAca,YAAY,CAA1B,EAA6BG,YAAY,CAAzC,CAAX;AACA,QAAMM,KAAKlB,mBAAmBc,EAAnB,EAAuBC,EAAvB,EAA2BJ,YAA3B,CAAX;AACA,QAAMQ,KAAKnB,mBAAmBgB,EAAnB,EAAuBC,EAAvB,EAA2BN,YAA3B,CAAX;AACA,WAAOX,mBAAmBkB,EAAnB,EAAuBC,EAAvB,EAA2BN,YAA3B,CAAP;AACH;;AAEc,SAASxB,WAAT,CAAqBI,CAArB,EAAwBC,CAAxB,EAA2B;AAC1C;AACI,QAAI0B,QAAQ,CAAZ;AACA,QAAMC,IAAI/B,WAAV;AACA,SAAK,IAAIgC,IAAI,CAAb,EAAgBA,IAAI/B,iBAApB,EAAuC+B,GAAvC,EAA4C;AACxC,YAAMC,qBAAY,CAAZ,EAAiBD,CAAjB,CAAN;AACA,YAAME,qBAAYH,CAAZ,EAAiBC,CAAjB,CAAN;AACAF,iBAASZ,kBAAkBf,IAAI8B,SAAtB,EAAiC7B,IAAI6B,SAArC,IAAkDC,SAA3D;AACH;;AAED;;AAEA,WAAOJ,QAAQ,IAAf;AACH","file":"perlinNoise.js","sourceRoot":"../../../../../assets/scripts/base","sourcesContent":["const persistence = 0.50;\nconst Number_Of_Octaves = 4;\n\nfunction Noise(x, y) // 根据(x,y)获取一个初步噪声值\n{\n    let n = x + y * 57;\n    n = (n << 13) ^ n;\n    return (1.0 - ((n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0);\n}\n\nfunction SmoothedNoise(x, y) // 光滑噪声\n{\n    const corners = (Noise(x - 1, y - 1) + Noise(x + 1, y - 1) + Noise(x - 1, y + 1) + Noise(x + 1, y + 1)) / 16;\n    const sides = (Noise(x - 1, y) + Noise(x + 1, y) + Noise(x, y - 1) + Noise(x, y + 1)) / 8;\n    const center = Noise(x, y) / 4;\n    return corners + sides + center;\n}\n\nfunction Cosine_Interpolate(a, b, x) // 余弦插值\n{\n    const ft = x * Math.PI;\n    const f = (1 - Math.cos(ft)) * 0.5;\n    return a * (1 - f) + b * f;\n}\n\nfunction InterpolatedNoise(x, y) // 获取插值噪声\n{\n    const integer_X = parseInt(x);\n    const fractional_X = x - integer_X;\n    const integer_Y = parseInt(y);\n    const fractional_Y = y - integer_Y;\n    const v1 = SmoothedNoise(integer_X, integer_Y);\n    const v2 = SmoothedNoise(integer_X + 1, integer_Y);\n    const v3 = SmoothedNoise(integer_X, integer_Y + 1);\n    const v4 = SmoothedNoise(integer_X + 1, integer_Y + 1);\n    const i1 = Cosine_Interpolate(v1, v2, fractional_X);\n    const i2 = Cosine_Interpolate(v3, v4, fractional_X);\n    return Cosine_Interpolate(i1, i2, fractional_Y);\n}\n\nexport default function PerlinNoise(x, y) // 最终调用：根据(x,y)获得其对应的PerlinNoise值\n{\n    let total = 0;\n    const p = persistence;\n    for (let i = 0; i < Number_Of_Octaves; i++) {\n        const frequency = 2 ** i;\n        const amplitude = p ** i;\n        total += InterpolatedNoise(x * frequency, y * frequency) * amplitude;\n    }\n\n    //console.log(\"perlin\", total)\n\n    return total * 1000;\n}\n"]}